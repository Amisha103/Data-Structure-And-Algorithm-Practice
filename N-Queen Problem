
Explaination: Only one queen can be placed in the single cell available.
Input: 4
Output: [[2 4 1 3 ],[3 1 4 2 ]]
Explaination: These are the 2 possible solutions.
Expected Time Complexity: O(n!)
Expected Auxiliary Space: O(n2) 

Constraints:
1 ≤ n ≤ 10

Solution-
class Solution {
    public ArrayList<ArrayList<Integer>> nQueen(int n) {
         ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
         boolean vis[][] = new boolean[n][n];
         for(int i = 0;i < n;i++)
         {
             Arrays.fill(vis[i], false);
         }
       findSolution(0, n,vis ,ans);
       return ans;
    }
    void findSolution(int row, int n, boolean vis[][], ArrayList<ArrayList<Integer>> ans)
    {
        if(row == n )
        {  ArrayList<Integer> t = new ArrayList<>();
           
            for(int i = 0;i < n;i++)
            {
              
                for(int j = 0;j < n;j++)
                {
                    if(vis[i][j])
                    {
                        t.add(j + 1);
                    }
                }
            }
            ans.add(t);
            
            return;
        }
        for(int i = 0;i < n;i++)
        {
                if(isSafe(vis, row,i, n))
                {
                    vis[row][i] = true;
                    findSolution(row + 1, n , vis, ans);
                    vis[row][i] = false;
                }
            
        }
        return;
    }
    boolean isSafe(boolean vis[][], int row, int col,int n)
    {
        for(int i = 0;i < n;i++)
        {
            if(vis[i][col])
            {
                return false;
            }
        }
        int r = row - 1;
        int c = col - 1;
        while(r >= 0 && c >= 0)
        {
            if(vis[r][c])
            {
                return false;
            }
            r--;
            c--;
        }
        r = row - 1;
        c = col + 1;
         while(r >= 0 && c < n)
        {
            if(vis[r][c])
            {
                return false;
            }
            r--;
            c++;
        }
        return true;
    }
}
