207. Course Schedule
Solved
Medium
Topics
Companies
Hint
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.


Solution-
class Solution {
    public boolean canFinish(int numCourses, int[][] pre) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>(2);
        for(int i = 0;i < numCourses;i++)
        {
            adj.add(new ArrayList<>());
        }
         for(int i = 0;i < pre.length;i++)
        {
            adj.get(pre[i][1]).add( pre[i][0]);
        }

int[] vis = new int[numCourses];
int[] pathvis = new int[numCourses];
for(int i = 0;i < numCourses;i++)
{
    if(adj.get(i).size() != 0)
    {
        if(vis[i] == 0)
        {
            if(dfs(adj, vis, pathvis, i))
        {
return false;
        }
        }
    }
}
return true;




    }
    boolean dfs(ArrayList<ArrayList<Integer>> adj, int vis[], int pathvis[], int src)
    {
        vis[src] = 1;
        pathvis[src] = 1;
        for(int t:adj.get(src))
        {
if(vis[t] == 1 && pathvis[t] == 1)     
{
    return true;
}       
else if(vis[t] != 1)
{
    if(dfs(adj, vis, pathvis, t))
    {
        return true;
    }
}
        }
        pathvis[src] = 0;
        return false;
    }
    
}
