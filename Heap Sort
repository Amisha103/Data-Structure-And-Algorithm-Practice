Given an array arr. The task is to sort the array elements by Heap Sort.

Examples:

Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]
Explanation: After sorting elements using heap sort, elements will be in order as 1,3,4,7,9.
Input: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Explanation: After sorting elements using heap sort, elements will be in order as 1, 2,3,4,5,6,7,8,9,10.
Input: arr[] = [2, 1, 5]
Output: [1, 2, 5]
Explanation: After sorting elements using heap sort, elements will be in order as 1,2,5,
Constraints:
1 ≤ arr.size() ≤ 106
1 ≤ arr[i] ≤ 106

Solution-
class Solution {
  
    public void heapSort(int arr[]) {
        int n = arr.length;
   for(int i = n / 2  - 1;i>= 0;i--)
   {
       heapify(arr, n, i);
       
   }
   for(int i = n - 1;i > 0;i--)
   {
       int temp = arr[0];
           arr[0] = arr[ i];
           arr[i] = temp;
           heapify(arr, i, 0);
    }
    }
    
    public void heapify(int arr[], int n, int ind)
    {
       int left =  2 * ind + 1;
       int right = 2 * ind + 2;
      
       int larg = ind;
       if(left < n && arr[left] > arr[larg])
       {
           larg = left;
       }
        if(right < n && arr[right] > arr[larg])
       {
           larg = right;
       }
       if(larg != ind)
       {
           int temp = arr[larg];
           arr[larg] = arr[ind];
           arr[ind] = temp;
           heapify(arr, n, larg);
       }
    }
   
}
