Spirally traversing a matrix
Difficulty: MediumAccuracy: 35.2%Submissions: 288K+Points: 4
You are given a rectangular matrix mat[][] of size n x m, and your task is to return an array while traversing the matrix in spiral form.

Examples:

Input: mat[][] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
Output: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]
Explanation: 

Input: mat[][] = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]
Output: [1, 2, 3, 4, 5, 6, 12, 18, 17, 16, 15, 14, 13, 7, 8, 9, 10, 11]
Explanation: Applying same technique as shown above.
Input: mat[][] = [[32, 44, 27, 23], [54, 28, 50, 62]]
Output: [32, 44, 27, 23, 62, 50, 28, 54]
Explanation: Applying same technique as shown above, output will be [32, 44, 27, 23, 62, 50, 28, 54].
Constraints:
1 <= n, m <= 1000
0 <= mat[i][j]<= 100


Solution-
class Solution {
    // Function to return a list of integers denoting spiral traversal of matrix.
    public ArrayList<Integer> spirallyTraverse(int mat[][]) {
       ArrayList<Integer> ans = new ArrayList<>();
       int n = mat.length;
       int m = mat[0].length;
       int sr = 0;
       int sc = 0;
       int er = n - 1;
       int ec = m - 1;
       while(sr <= er && sc <= ec)
       {
           for(int i = sc;i<= ec;i++)
           {
               ans.add(mat[sr][i]);
           }
           sr++;
            for(int i = sr;i <= er ;i++)
           {
               ans.add(mat[i][ec]);
           }
           ec--;
           if(sr <= er)
           {
               for(int i = ec;i >= sc;i--)
           {
               ans.add(mat[er][i]);
           }
        er--;
           }
               
            if(sc <= ec)
           {
               for(int i = er;i >= sr;i--)
           {
               ans.add(mat[i][sc]);
           }
         sc++;
           }
             
           
       }
       return ans;
    }
}


