Sort 0s, 1s and 2s
Difficulty: MediumAccuracy: 50.58%Submissions: 757K+Points: 4Average Time: 10m
Given an array arr[] containing only 0s, 1s, and 2s. Sort the array in ascending order.

You need to solve this problem without utilizing the built-in sort function.

Examples:

Input: arr[] = [0, 1, 2, 0, 1, 2]
Output: [0, 0, 1, 1, 2, 2]
Explanation: 0s 1s and 2s are segregated into ascending order.
Input: arr[] = [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]
Output: [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2]
Explanation: 0s 1s and 2s are segregated into ascending order.

Follow up: Could you come up with a one-pass algorithm using only constant extra space?
Constraints:
1 <= arr.size() <= 106
0 <= arr[i] <= 2

Solution-
class Solution {
    // Function to sort an array of 0s, 1s, and 2s
    public void sort012(int[] arr) {
      int n = arr.length;
      int zerocnt = 0;
      int onecnt = 0;
      int twocnt = 0;
      for(int i = 0; i< n;i++)
      {
          if(arr[i] == 0)
          {
              zerocnt++;
          }
          else if(arr[i] == 1)
          {
              onecnt++;
          }
          else
          {
              twocnt++;
          }
      }
      int i = 0;
      for(int j = 0;j < zerocnt;j++)
      {
          arr[i] = 0;
          i++;
      }
       for(int j = 0;j < onecnt;j++)
      {
          arr[i] = 1;
          i++;
      }
       for(int j = 0;j < twocnt;j++)
      {
          arr[i] = 2;
          i++;
      }
    }
}
