Sum Pair closest to target
Difficulty: EasyAccuracy: 44.75%Submissions: 46K+Points: 2
Given an array arr[] and a number target, find a pair of elements (a, b) in arr[], where a<=b whose sum is closest to target.
Note: Return the pair in sorted order and if there are multiple such pairs return the pair with maximum absolute difference. If no such pair exists return an empty array.

Examples:

Input: arr[] = [10, 30, 20, 5], target = 25
Output: [5, 20]
Explanation: As 5 + 20 = 25 is closest to 25.
Input: arr[] = [5, 2, 7, 1, 4], target = 10
Output: [2, 7]
Explanation: As (4, 7) and (2, 7) both are closest to 10, but absolute difference of (2, 7) is 5 and (4, 7) is 3. Hence, [2, 7] has maximum absolute difference and closest to target. 
Input: arr[] = [10], target = 10
Output: []
Explanation: As the input array has only 1 element, return an empty array.
Constraints:
1 <= arr.size() <= 2*105
0 <= target<= 2*105
0 <= arr[i] <= 105

Solution-

class Solution {
    public List<Integer> sumClosest(int[] arr, int target) {
      Arrays.sort(arr);  
        int n = arr.length;

        if (n < 2) { 
            return new ArrayList<>();
        }

        int mindiff = Integer.MAX_VALUE;  
        int maxAbsDiff = Integer.MIN_VALUE; 
        int low = 0;
        int high = n - 1;
        int ele1 = arr[low];
        int ele2 = arr[high];

        while (low < high) {
            int sum = arr[low] + arr[high];
            int currentDiff = Math.abs(target - sum);  
            int absDiff = arr[high] - arr[low];

 
            if (currentDiff < mindiff || (currentDiff == mindiff && absDiff > maxAbsDiff)) {
                mindiff = currentDiff;
                maxAbsDiff = absDiff;
                ele1 = arr[low];
                ele2 = arr[high];
            }

        
            if (sum > target) {
                high--;
            } else {
                low++;
            }
        }

        List<Integer> ans = new ArrayList<>();
        ans.add(ele1);
        ans.add(ele2);
        return ans;
          }
}
