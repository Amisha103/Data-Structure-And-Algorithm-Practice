Merge Sort
Difficulty: MediumAccuracy: 54.1%Submissions: 202K+Points: 4
Given an array arr[], its starting position l and its ending position r. Sort the array using the merge sort algorithm.

Examples:

Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]
Input: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Input: arr[] = [1, 3 , 2]
Output: [1, 2, 3]
Constraints:
1 <= arr.size() <= 105
1 <= arr[i] <= 105

Solution-
class Solution {

    void mergeSort(int arr[], int l, int r) {
     if(l < r)
     {
         int mid = (l + r)/ 2;
         mergeSort(arr, l, mid);
         mergeSort(arr, mid + 1, r);
         merge(arr, l, mid, r);
     }
    }
    void merge(int arr[], int l, int mid, int r)
    {
       int i = l;
       int j = mid + 1;
       int k = 0;
       int a[] = new int[r - l + 1];
       while(i <= mid && j <= r)
       {
           if(arr[i] <= arr[j])
           {
               a[k] = arr[i];
               i++;
               k++;
           }
           else
           {
               
               a[k] = arr[j];
               j++;
               k++;
           }
       }
       while(i <= mid)
       {
         a[k] = arr[i];
               i++;
               k++;   
       }
        while(j <= r)
        {
            a[k] = arr[j];
               j++;
               k++; 
        }
        for(int x = 0;x < k;x++)
        {
            arr[l + x] = a[x];
        }
    }
}
